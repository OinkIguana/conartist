# TODO: use this to generate the GraphQL functions and replace the custom
#       GraphQL stuff in the clients.
#       Probably use Apollo, and have to patch jahewson or port ApolloJS for Elm

scalar NaiveDate
scalar DateTimeUtc
scalar DateTimeFixedOffset
scalar Money
scalar Currency

type Query {
  user(id: Int): User!
  userConvention(id: Int, conId: Int!): FullUserConvention!
  convention(date: Date, page: Int, limit: Int): ConventionPage!
}

type User {
  id: Int!
  name: String!
  email: String!
  keys: Int!
  joinDate: DateTimeUtc!
  productTypes: [ProductType]!
  products: [ProductInInventory]!
  prices: [PriceRow]!
  conventions: [FullUserConvention]!
  settings: Settings!
}

type Settings {
  currency: Currency!
}

type ProductType {
  id: Int!
  name: String!
  color: Int!
  discontinued: Boolean!
}

type ProductInInventory {
  id: Int!
  name: String!
  quantity: Int!
  discontinued: Boolean!
}

type PricePairOut {
  quantity: Int!
  price: Money!
}

type Price {
  typeId: Int!
  productId: Int
  prices: [PricePairOut]!
}

type PriceRow {
  index: Int!
  typeId: Int!
  productId: Int
  quantity: Int!
  price: Money!
}

type Record {
  id: Int!
  products: [Int]!
  price: Money!
  time: DateTimeUtc!
}

type Expense {
  id: Int!
  price: Money!
  category: String!
  description: String!
  time: DateTimeUtc!
}

type FullUserConvention {
  id: Int!
  conId: Int!
  name: String!
  images: [String]!
  start: DateTimeUtc!
  end: DateTimeUtc!
  extraInfo: String!
  productTypes: [ProductType]!
  products(includeAll: Boolean): [ProductInInventory]!
  condensedPrices(includeAll: Boolean): [Price]!
  prices(includeAll: Boolean): [PriceRow]!
  records: [Record]!
  expenses: [Expense]!
}

type Convention {
  id: Int!
  name: String!
  images: [String]!
  start: DateTimeUtc!
  end: DateTimeUtc!
  extraInfo: ConventionExtraInfo!
  userInfo: ConventionUserInfo!
}

type ConventionExtraInfo {
  title: String!
  info: String
  action: String
  actionText: String
}

type ConventionUserInfo {
  id: Int!
  info: String!
  upvotes: Int!
  downvotes: Int!
}

type ConventionPage {
  pages: Int!
  page: Int!
  data: [Convention]!
}

type Mutation {
  changeUserEmail(userId: Int, email: String!): User!
  changeUserPassword(userId: Int, password: String!): User!
  changeUserName(userId: Int, name: String!): User!
  addUserKeys(userId: Int, quantity: Int!): User!

  addUserProductType(userId: Int, productType: ProductTypeAdd!): ProductType!
  modUserProductType(userId: Int, productType: ProductTypeMod!): ProductType!

  addUserProduct(userId: Int, product: ProductAdd!): ProductInInventory!
  modUserProduct(userId: Int, product: ProductMod!): ProductInInventory!

  addUserPrice(userId: Int, price: PriceAdd!): Price!
  delUserPrice(userId: Int, price: PriceDel!): Boolean!

  addUserConvention(userId: Int, conId: Int!): Convention!
  delUserConvention(userId: Int, conId: Int!): Boolean!

  addUserRecord(userId: Int, record: RecordAdd!): Record!
  modUserRecord(userId: Int, record: RecordMod!): Record!
  delUserRecord(userId: Int, record: RecordDel!): Record!

  addUserExpense(userId: Int, expense: ExpenseAdd!): Expense!
  modUserExpense(userId: Int, expense: ExpenseMod!): Expense!
  delUserExpense(userId: Int, expense: ExpenseDel!): Expense!

  updateSettings(userId: Int): SettingsMutation!
}

type SettingsMutation {
  currency(currency: Currency!): Currency!
}
input ProductTypeAdd {
  name: String!
  color: Int!
}
input ProductTypeMod {
  typeId: Int!
  name: String
  color: Int
  discontinued: Boolean
}

input ProductAdd {
  typeId: Int!
  name: String!
  quantity: Int!
}
input ProductMod {
  productId: Int!
  name: String
  quantity: Int
  discontinued: Boolean
}

input PricePairIn {
  quantity: Int!
  price: Money!
}
input PriceAdd {
  typeId: Int!
  productId: Int
  prices: [PricePairIn]!
}
input PriceDel {
  typeId: Int!
  productId: Int
}

input RecordAdd {
  conId: Int!
  products: [Int]!
  price: Money!
  time: DateTimeFixedOffset!
}
input RecordMod {
  recordId: Int!
  products: [Int]
  price: Money
}
input RecordDel {
  recordId: Int!
}

input ExpenseAdd {
  conId: Int!
  price: Money!
  category: String!
  description: String!
  time: DateTimeFixedOffset!
}
input ExpenseMod {
  expenseId: Int!
  price: Money
  category: String
  description: String
}
input ExpenseDel {
  expenseId: Int!
}
